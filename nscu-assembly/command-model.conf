subsystem = NFIRAOS
component = nscu

description = NSCU Assembly commands.

receive = [
  
  {
    name            = init
    description     = """Prepares the assembly for operation and reads configuration files. (engineering)

This command will internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Discrete Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.onTarget = true | false
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

{
    name            = datum
    description     = """Datum both the NSCU shutter and mirror stage.  Light sources are unaffected.

This command will internally trigger a stop if required.

*Discrete Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.shutter = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = EXTRACT
<li> state.onTarget = true
<li> state.shutter = CLOSED
</ul>"""
  }

  {
    name            = stop
    description     = """Cancel the current discrete or following type command, stop NSCU mirror stage, close shutter and turn off all lights sources.
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = EXTRACT | DEPLOY | INTERMEDIATE | UNKNOWN
<li> state.onTarget = true | false
<li> state.shutter = CLOSED
</ul>"""
  }

  {
    name            = shutterOpen
    description     = """Select to open or close the NSCU shutter."

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.shutter = OPEN | CLOSED
</ul>"""
    args = [
      {
        name        = open
        description = flag indicating if the NSCU shutter should be opened.
        type        = boolean
      }
    ]
    requiredArgs = [ open ]
  }

  {
    name            = deployMirror
    description     = """Select to deploy or extracts the NSCU deployment mirror.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = EXTRACT | DEPLOY 
</ul>"""
    args = [
      {
        name        = deploy
        description = flag indicating if the NSCU mirror should be deployed.
        type        = boolean
      }
    ]
    requiredArgs = [ deploy ]
  }


  {
    name            = lampPower
    description     = """Turn power to a NSCU lamp on or off."

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.lamp<LAMPNAME> = INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.lamp<LAMPNAME> = ON | OFF
</ul>"""
    args = [
      {
        name        = lamp
        description = name of lamp to power on or off.
        enum        = [xenon, argon, neon, krypton, flat]
      }
      {
        name        = on
        description = flag indicating if the NSCU lamp should be powered on (true) or off (false).
        type        = boolean
      }
    ]
    requiredArgs = [ lamp, on ]
  }

  {
    name            = test
    description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to its HCD.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = debug
    description     = """Change the assembly debug message level. (engineering)

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Friendly Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }

  {
    name            = shutdown
    description     = """Shutdown the assembly. (engineering)

This command is used to properly shutdown the assembly in preparation to turn off the NCC server.

*Simple Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
  }

]

